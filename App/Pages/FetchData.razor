@page "/fetchdata"
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IAccessTokenProvider TokenProvider
@inject SignOutSessionStateManager SignOutManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Email Addresses</h1>

<p>This component shows all the email addresses involved in most recent @emailsGathered email messages.</p>
<button class="btn btn-primary" @onclick="@(async () => await processEmails())">Process Mailbox</button>

<hr />
<p>Current Process: @currentProcess</p>
<hr />
@if (emailaddresses.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email Address</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var addr in emailaddresses)
            {
                <tr>
                    <td>@addr.Address</td>
                    <td>@addr.Name</td>

                </tr>
            }
        </tbody>
    </table>

    <hr />


}
@code {
    string currentProcess { get; set; } = "Pending...";
    int emailsGathered { get; set; } = 0;
    int numemailstoGather { get; set; } = 1000;
    string data2 { get; set; } = "Next";
    List<Model.EmailAddress> emailaddresses { get; set; } = new List<Model.EmailAddress>();



    async Task processEmails()
    {
        currentProcess = "Starting to process mailbox..";
        StateHasChanged();
        try{
        for (int i = 0; i < (numemailstoGather/10); i++)
        {

            List<Model.EmailAddress> newaddresses = await MsgMgr.GetEmailAddresses(TokenProvider, Http);
            emailaddresses.AddRange(newaddresses);
            emailsGathered = emailsGathered + 10;
            currentProcess = $"Processed {emailsGathered} emails to get {emailaddresses.Count} addresses";
            StateHasChanged();
        }
        await cleanup();
        StateHasChanged();
        await addtocontacts();
        StateHasChanged();
        }
        catch
            {
                currentProcess="Error: Are you sure you are a valid Office 365 User?";
            }
    }

    async Task cleanup()
    {
        currentProcess = $"Cleaning...";
        var initialcount = emailaddresses.Count;
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        emailaddresses = MsgMgr.CleanUp(emailaddresses, "nick@hubone.com");
        currentProcess = $"Cleaned {initialcount - emailaddresses.Count} Addresses";
    }



    async Task addtocontacts()
    {
        var result = await MsgMgr.AddToContacts(emailaddresses, TokenProvider, Http);
        currentProcess = $"Added {result} addresses";
        emailaddresses = new List<Model.EmailAddress>();
    }

}
